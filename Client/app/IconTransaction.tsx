import { useState } from "react";
import { ThemedText } from "@/components/ThemedText";
import { ThemedView } from "@/components/ThemedView";
import { ThemedSafeAreaView } from "@/components/ThemedSafeAreaView";
import {
  Modal,
  Pressable,
  ScrollView,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from "react-native";
import { useColorScheme } from "react-native";
import Ionicons from "@expo/vector-icons/Ionicons";
import MaterialIcons from "@expo/vector-icons/MaterialIcons";
import { ThemedButton } from "@/components/ThemedButton";

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏Ç‡∏≠‡∏á Transaction
type Transaction = {
  id: number;
  name: string;
  icon: keyof typeof Ionicons.glyphMap;
};

export default function IconTransaction() {
  const theme = useColorScheme();
  const isDarkMode = theme === "dark";
  const [isExpenses, setIsExpenses] = useState(true);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [selectedTransaction, setSelectedTransaction] =
    useState<Transaction | null>(null);
  const [editedName, setEditedName] = useState("");
  const [selectedIcon, setSelectedIcon] =
    useState<keyof typeof Ionicons.glyphMap>("restaurant-outline");

  const componentcolor = isDarkMode ? "#181818" : "#d8d8d8";

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° iconList ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
  const iconList: (keyof typeof Ionicons.glyphMap)[] = [
    "restaurant-outline",  // ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  "fast-food-outline",   // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô
  "cafe-outline",        // ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà
  "beer-outline",        // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå
  "wine-outline",        // ‡πÑ‡∏ß‡∏ô‡πå
  "nutrition-outline",   // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û

  // üöó ‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á & ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏´‡∏ô‡∏∞
  "bus-outline",         // ‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
  "car-outline",         // ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå
  "airplane-outline",    // ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
  "bicycle-outline",     // ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô
  "subway-outline",      // ‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô
  "train-outline",       // ‡∏£‡∏ñ‡πÑ‡∏ü

  // üè† ‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å & ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏û
  "home-outline",        // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å
  "bed-outline",         // ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
  "storefront-outline",  // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
  "construct-outline",   // ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ö‡πâ‡∏≤‡∏ô

  // üõçÔ∏è ‡∏´‡∏°‡∏ß‡∏î‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á & ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
  "cart-outline",        // ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á
  "pricetag-outline",    // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
  "bag-outline",         // ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á
  "shirt-outline",       // ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤

  // üí∞ ‡∏´‡∏°‡∏ß‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô & ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
  "cash-outline",        // ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
  "wallet-outline",      // ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
  "card-outline",        // ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
  "pie-chart-outline",   // ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•
  "stats-chart-outline", // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
  "trending-up-outline", // ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
  "trending-down-outline", // ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô

  // üè¢ ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ & ‡∏á‡∏≤‡∏ô
  "briefcase-outline",   // ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
  "gift-outline",        // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™
  "people-outline",      // ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
  "person-outline",      // ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå
  "school-outline",      // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏≠‡∏ö‡∏£‡∏°
  "receipt-outline",     // ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
  "business-outline",    // ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß

  // üéâ ‡∏´‡∏°‡∏ß‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° & ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á
  "musical-notes-outline", // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï
  "tv-outline",          // ‡∏Ñ‡πà‡∏≤ Netflix / Streaming
  "game-controller-outline", // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏°
  "film-outline",        // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏´‡∏ô‡∏±‡∏á
  "camera-outline",      // ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
  "football-outline",    // ‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ / ‡∏Å‡∏µ‡∏¨‡∏≤
  ];

  // ‚úÖ ‡πÉ‡∏ä‡πâ useState ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  const [expensesData, setExpensesData] = useState<Transaction[]>([
    { id: 1, name: "Rice", icon: "restaurant-outline" },
    { id: 2, name: "Water", icon: "water-outline" },
    { id: 3, name: "Fuel", icon: "flame-outline" },
    { id: 4, name: "Raw Materials", icon: "leaf-outline" },
    { id: 5, name: "Transportation", icon: "bus-outline" },
    { id: 6, name: "Accommodation", icon: "home-outline" },
    { id: 7, name: "Investment", icon: "cash-outline" },
  ]);
  
  const [incomeData, setIncomeData] = useState<Transaction[]>([
    { id: 1, name: "Salary", icon: "briefcase-outline" },
    { id: 2, name: "Bonus", icon: "gift-outline" },
    { id: 3, name: "Side Income", icon: "trending-up-outline" },
    { id: 4, name: "Interest", icon: "wallet-outline" },
    { id: 5, name: "Dividends", icon: "pie-chart-outline" },
  ]);

  const transactions = isExpenses ? expensesData : expensesData;

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const openEditModal = (transaction: Transaction) => {
    setSelectedTransaction(transaction);
    setEditedName(transaction.name);
    setSelectedIcon(transaction.icon);
    setIsEditModalVisible(true);
  };

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const saveEdit = () => {
    if (selectedTransaction) {
      const updatedData = transactions.map((item) =>
        item.id === selectedTransaction.id
          ? { ...item, name: editedName, icon: selectedIcon }
          : item
      );

      if (isExpenses) {
        setExpensesData(updatedData);
      } else {
        setIncomeData(updatedData);
      }
    }
    setIsEditModalVisible(false);
  };

  return (
    <>
      <ThemedSafeAreaView>
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö Income / Outcome */}
        <View className="flex-row w-full justify-center p-3">
          <Pressable
            onPress={() => setIsExpenses(true)}
            className={`px-6 py-2 rounded-lg mx-2 ${
              isExpenses ? "bg-red-500" : "bg-gray-300"
            }`}
          >
            <ThemedText
              className={`font-bold ${isExpenses ? "text-white" : "text-black"}`}
            >
              EXPENSES
            </ThemedText>
          </Pressable>

          <Pressable
            onPress={() => setIsExpenses(false)}
            className={`px-6 py-2 rounded-lg mx-2 ${
              !isExpenses ? "bg-green-500" : "bg-gray-300"
            }`}
          >
            <ThemedText
              className={`font-bold ${
                !isExpenses ? "text-white" : "text-black"
              }`}
            >
              INCOME
            </ThemedText>
          </Pressable>
        </View>

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Transactions */}
        <View className="mt-1">
          {transactions.map((item) => (
            <View
              key={item.id}
              style={{ backgroundColor: componentcolor }}
              className="flex-row items-center justify-between p-3 rounded-lg border w-[80%] mx-auto mt-2"
            >
              {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô + ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
              <View className="flex-row items-center space-x-3">
                <ThemedText className="ml-3">
                <Ionicons name={item.icon} size={22} />
                </ThemedText>
                <ThemedText className="text-[16px] ml-3">
                  {item.name}
                </ThemedText>
              </View>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
              <Pressable
                onPress={() => openEditModal(item)}
                className="p-2 rounded-full"
              >
                <ThemedText>
                <MaterialIcons name="edit" size={18} />
                </ThemedText>
              </Pressable>
            </View>
          ))}
        </View>
      </ThemedSafeAreaView>

      {/* Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
      <Modal transparent visible={isEditModalVisible} animationType="fade">
        <TouchableWithoutFeedback onPress={() => setIsEditModalVisible(false)}>
          <View className="flex-1 items-center justify-center bg-black/50">
            <View
              className={`w-4/5 p-6 rounded-3xl shadow-lg ${
                isDarkMode ? "bg-[#282828]" : "bg-white"
              }`}
              onStartShouldSetResponder={() => true}
            >
              <ThemedText className="text-xl font-bold">
                Edit Transaction
              </ThemedText>

              <TextInput
                value={editedName}
                onChangeText={setEditedName}
                className="border rounded-lg p-3 mb-4 w-full mt-3"
                placeholderTextColor={isDarkMode ? "#BBB" : "#777"}
                style={{ backgroundColor: isDarkMode ? "#222" : "#FFF",
                  color: isDarkMode ? "#FFF" : "#222",
                 }}
              />

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
              <ScrollView horizontal className="flex-row gap-2">
                {iconList.map((icon) => (
                  <Pressable
                    key={icon}
                    onPress={() => setSelectedIcon(icon)}
                    className={`p-3 m-1 rounded-full ${
                      selectedIcon === icon
                        ? isExpenses
                          ? "bg-red-500"
                          : "bg-green-500"
                        : "bg-gray-200"
                    }`}
                  >
                    <Ionicons
                      name={icon}
                      size={24}
                      color={selectedIcon === icon ? "white" : "black"}
                    />
                  </Pressable>
                ))}
              </ScrollView>

              <View className="flex-row justify-between mt-10 gap-8">
                <ThemedButton
                  className="bg-gray-400 h-11 w-28"
                  onPress={() => setIsEditModalVisible(false)}
                >
                  <ThemedText>Cancel</ThemedText>
                </ThemedButton>
                <ThemedButton
                  className="bg-green-500 h-11 w-28"
                  onPress={saveEdit}
                >
                  <ThemedText>Save</ThemedText>
                </ThemedButton>
              </View>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
    </>
  );
}
