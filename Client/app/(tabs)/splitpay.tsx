import {
  useState,
  useEffect,
  useRef,
  SetStateAction,
  useCallback,
} from "react";
import { ThemedText } from "@/components/ThemedText";
import { ThemedView } from "@/components/ThemedView";
import { ThemedSafeAreaView } from "@/components/ThemedSafeAreaView";
import { router } from "expo-router";
import { Image } from "expo-image";
import {
  View,
  TouchableOpacity,
  Text,
  Pressable,
  ScrollView,
  TextInput,
  Dimensions,
  NativeSyntheticEvent,
  NativeScrollEvent,
} from "react-native";
import { useColorScheme } from "react-native";
import { ThemedButton } from "@/components/ThemedButton";
import { ThemedScrollView } from "@/components/ThemedScrollView";
import { ThemedCard } from "@/components/ThemedCard";
import { UserContext } from "@/hooks/conText/UserContext";
import { useContext } from "react";
import { Animated, Easing } from "react-native";
import { TouchableWithoutFeedback } from "react-native";

import Ionicons from "@expo/vector-icons/Ionicons";
import AntDesign from "@expo/vector-icons/AntDesign";
import MaterialIcons from "@expo/vector-icons/MaterialIcons";
import Entypo from "@expo/vector-icons/Entypo";
import { ThemedScrollViewCenter } from "@/components/ThemedScrollViewCenter";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import Slider from "@react-native-community/slider";
import { resultObject } from "@/hooks/auth/GetUserBank";

const { height } = Dimensions.get("window"); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î borderRadius

export default function SplitPay() {
  const theme = useColorScheme();
  const isDarkMode = theme === "dark";
  const componentColor = theme === "dark" ? "!bg-[#181818]" : "!bg-[#d8d8d8]";
  const componentIcon = theme === "dark" ? "#f2f2f2" : "#2f2f2f";

  const [selected, setSelected] = useState("budget");
  const [accountCheck, setAccount] = useState(false);
  const [cloudpocketCheck, setCloudPocket] = useState(false);
  const { bank } = useContext(UserContext);
  const [BudgetID, setBudgetID] = useState({ id: "" });
  const [isBudget, setIsBudget] = useState(true);
  const [isOverlayVisible, setIsOverlayVisible] = useState(false);
  const [isButtonVisible, setIsButtonVisible] = useState(true);

  const slideAnim = useRef(new Animated.Value(300)).current;

  const [selectedCard, setSelectedCard] = useState<resultObject | null>(null);
  const [budgetName, setBudgetName] = useState("");
  const limitRef = useRef(0);
  const budgetLimitRef = useRef(0);
  const sliderValueRef = useRef(0); // ‚úÖ ‡πÉ‡∏ä‡πâ `useRef` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ re-render
  const [sliderValue, setSliderValue] = useState(0); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

  const [selectedColor, setSelectedColor] = useState("");
  const isEditing = useRef(false);
  const [selectedIcon, setSelectedIcon] = useState<string | null>(null);

  // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï budgetLimit ‡∏ï‡∏≤‡∏° limit ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
  const [limit, setLimit] = useState(0); // ‚úÖ ‡πÉ‡∏ä‡πâ State ‡∏Ñ‡∏∏‡∏°‡∏Ñ‡πà‡∏≤
  const [budgetLimit, setBudgetLimit] = useState(0);
  const isDragging = useRef(false); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [inputValue, setInputValue] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  const [dummyState, setDummyState] = useState(false); // ‚úÖ ‡πÉ‡∏ä‡πâ trigger UI update ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

  const updateUI = () => setDummyState((prev) => !prev); // ‚úÖ Trigger UI update ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  
 // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô TextInput ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Budget ‡πÅ‡∏•‡∏∞ Slider (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà trigger `re-render`)
const handleAmountChange = useCallback((text: string) => {
  let newAmount = parseFloat(text.replace(/[^0-9.]/g, "")) || 0;
  if (selectedCard) {
    newAmount = Math.min(newAmount, selectedCard.balance);
  }
  budgetLimitRef.current = newAmount;
  sliderValueRef.current = selectedCard && selectedCard.balance > 0 ? (newAmount / selectedCard.balance) * 100 : 0;

  setInputValue(newAmount.toFixed(0)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  updateUI(); // ‚úÖ Trigger UI update
}, [selectedCard]);

// ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Slider ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Budget (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà trigger `re-render`)
const handleSliderChange = useCallback((value: number) => {
  sliderValueRef.current = value;
  if (selectedCard) {
    budgetLimitRef.current = (selectedCard.balance * value) / 100;
    setInputValue(budgetLimitRef.current.toFixed(0)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    updateUI(); // ‚úÖ Trigger UI update
  }
}, [selectedCard]);

// ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
useEffect(() => {
  if (selectedCard) {
    sliderValueRef.current = 0;
    budgetLimitRef.current = (selectedCard.balance * 50) / 100;
    setInputValue(budgetLimitRef.current.toFixed(2));
    updateUI(); // ‚úÖ Trigger UI update
  }
}, [selectedCard]);

// ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Budget (‡∏•‡∏î re-render)
const handleSliderComplete = useCallback((value: number) => {
  isDragging.current = false;
  if (selectedCard) {
    const calculatedAmount = (selectedCard.balance * value) / 100;
    budgetLimitRef.current = calculatedAmount;
  }
}, [selectedCard]);


useEffect(() => {
  setSliderValue(sliderValueRef.current);
  setBudgetLimit(budgetLimitRef.current);
}, [sliderValueRef.current, budgetLimitRef.current]); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

  const colors = [
    "#F94144",
    "#F3722C",
    "#F8961E",
    "#F9844A",
    "#F9C74F",
    "#90BE6D",
    "#43AA8B",
    "#4D908E",
    "#577590",
    "#277DA1",
  ];
  const icons = [
    "restaurant",
    "flight",
    "home",
    "directions-car",
    "add-circle-outline",
  ];

  const toggleOverlay = (visible: boolean) => {
    console.log("toggleOverlay:", visible);

    if (visible) {
      setIsOverlayVisible(true); // ‡πÄ‡∏õ‡∏¥‡∏î Overlay ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Animation
      Animated.timing(slideAnim, {
        toValue: 0, // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î
        duration: 300,
        easing: Easing.ease,
        useNativeDriver: true,
      }).start();
    } else {
      Animated.timing(slideAnim, {
        toValue: height, // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
        duration: 300,
        easing: Easing.ease,
        useNativeDriver: true,
      }).start(() => {
        setIsOverlayVisible(false); // ‡∏õ‡∏¥‡∏î Overlay ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Animation ‡∏à‡∏ö
        slideAnim.setValue(height); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      });
    }
  };

  const screenWidth = Dimensions.get("window").width; // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  const cardWidth = 280; // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Card
  const cardMargin = 18; // ‚úÖ Margin ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
  const snapToInterval = cardWidth + cardMargin * 2; // ‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞ snap ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πä‡∏∞

  const scrollViewRef = useRef<ScrollView>(null);

  const [cardPositions, setCardPositions] = useState<
    { id: number; x: number }[]
  >([]);

  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Card
  const storeCardPosition = (id: number, x: number) => {
    setCardPositions((prev) => {
      const exists = prev.some((item) => item.id === id);
      if (!exists) return [...prev, { id, x }];
      return prev;
    });
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Card ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {
    const scrollX = event.nativeEvent.contentOffset.x;
    const centerScreen = scrollX + screenWidth / 2;

    let closestCard: resultObject | null = null as resultObject | null;
    let minDistance = Number.MAX_VALUE;

    cardPositions.forEach((cardPos) => {
      const distance = Math.abs(cardPos.x - centerScreen);
      if (distance < minDistance) {
        minDistance = distance;
        closestCard = bank?.find((item) => item.id === cardPos.id) || null;
      }
    });

    if (closestCard && (closestCard as resultObject).id !== selectedCard?.id) {
      setSelectedCard(closestCard);
      console.log("üéØ Selected Card:", closestCard);
    }
  };

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô ScrollView ‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  useEffect(() => {
    if (bank && bank.length > 0 && scrollViewRef.current) {
      setTimeout(() => {
        scrollViewRef.current?.scrollTo({ x: 0, animated: true });
        setSelectedCard(bank[0]); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ selectedCard ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å
        console.log("üöÄ First Card Selected:", bank[0]);
      }, 500);
    }
  }, [bank]);

  return (
    <ThemedView>
      <ThemedView className="flex-col w-full h-full justify-center items-center">
        <ThemedView className=" flex-row !items-center !justify-between w-full px-4">
          <Image
            source={require("@/assets/logos/LOGO.png")}
            style={{
              width: 79,
              height: 70,
              marginTop: "2%",
              marginLeft: "5%",
            }}
          />
          <Ionicons
            onPress={() => router.push("/NotificationPage")}
            name="notifications-outline"
            size={32}
            color={`${componentIcon}`}
            style={{
              alignSelf: "center",
              marginTop: "5%",
              marginRight: "5%",
            }}
          />
        </ThemedView>
        <ThemedView className="flex-row w-full h-10 justify-center bg-transparent p-1 mt-14 ">
          <ThemedView className="flex-row w-72 h-10 rounded-full bg-[#d5d5d5] dark:bg-[#383838] justify-center items-center">
            <Pressable
              onPress={() => setIsBudget(true)}
              className={`w-32 h-full flex items-center justify-center rounded-full ${
                isBudget ? "bg-green-500 w-[160px]" : "bg-transparent w-[120px]"
              }`}
            >
              <ThemedText
                className={`font-bold ${
                  isBudget
                    ? "text-white"
                    : isDarkMode
                    ? "text-white"
                    : "text-black"
                }`}
              >
                BUDGET
              </ThemedText>
            </Pressable>

            <Pressable
              onPress={() => setIsBudget(false)}
              className={`w-32 h-full flex items-center justify-center rounded-full ${
                !isBudget
                  ? "bg-green-500 w-[160px]"
                  : "bg-transparent w-[120px]"
              }`}
            >
              <ThemedText
                className={`font-bold ${
                  !isBudget
                    ? "text-white"
                    : isDarkMode
                    ? "text-white"
                    : "text-black"
                }`}
              >
                RETIRE
              </ThemedText>
            </Pressable>
          </ThemedView>
        </ThemedView>

        {bank && bank.length > 0 ? (
  <ThemedView className="flex-col w-full h-fit bg-transparent mt-10">
    <ScrollView
      ref={scrollViewRef}
      horizontal
      showsHorizontalScrollIndicator={false}
      snapToInterval={snapToInterval}
      decelerationRate="fast"
      onScroll={handleScroll}
      scrollEventThrottle={16}
      className="w-full"
    >
      <ThemedView className="w-full px-16">
        <ThemedView className="mt-0.5 mb-1 flex-row space-x-1 gap-5">
          {bank?.map((account: resultObject) => (
            <Pressable
              key={account.id}
              onLayout={(event) => {
                const x =
                  event.nativeEvent.layout.x +
                  10 +
                  event.nativeEvent.layout.width / 2;
                storeCardPosition(account.id, x);
              }}
            >
              <ThemedView>
                <ThemedCard
                  CardID={account.id}
                  name={account.account_name}
                  color={account.color_code}
                  balance={account.balance.toString()}
                  mode="large"
                  imageIndex={Number(account.icon_id)}
                  className={`!items-center !justify-center bg-[#fefefe] rounded-lg 
                              ${
                                selectedCard?.id === account.id
                                  ? "border-4 border-[#03A696]"
                                  : "border-0"
                              }
                            `}
                />
              </ThemedView>
            </Pressable>
          ))}
        </ThemedView>
      </ThemedView>
    </ScrollView>

    {/* Header Monthly Budgets */}
    <ThemedView className="my-5 w-[80%] mt-10">
      <ThemedText className="text-xl font-bold text-start w-full">
        Monthly Budgets
      </ThemedText>
    </ThemedView>

    {/* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Budget ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Budget, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Budget */}
    {BudgetID && BudgetID.id ? (
      <ThemedText>Budget exists</ThemedText>
    ) : (
      <ThemedView className="flex-row items-center justify-center bg-transparent p-1 mt-5 mb-4">
        <ThemedView className="w-[80%] h-fit">
          <Pressable
            className={`justify-center items-center rounded-3xl w-[370px] h-[320px] ${componentColor} ml-2`}
            onPress={() => {
              console.log("‚úÖ Pressable clicked, opening overlay");
              toggleOverlay(true);
            }}
          >
            <AntDesign name="filetext1" size={70} color={componentIcon} className="m-3" />
            <ThemedView className="bg-transparent w-56 h-18">
              <ThemedText className="text-[#484848] dark:text-white mx-5 text-center font-bold">
                Let‚Äôs get started with your first budget plan!
              </ThemedText>
            </ThemedView>
            <ThemedView className="w-12 h-12 mt-5 bg-transparent border-2 border-[#484848] dark:border-white rounded-full flex items-center justify-center">
              <Ionicons name="add" size={24} color={componentIcon} />
            </ThemedView>
          </Pressable>
        </ThemedView>
      </ThemedView>
    )}
  </ThemedView>
) : (
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  <ThemedView className="flex-col justify-center items-center bg-transparent p-1 mt-10 mb-4">
    <Pressable
      className={`${componentColor} flex-col w-[280px] h-[180px] rounded-2xl justify-center items-center p-4`}
      onPress={() => router.push("/AddAccount")}
    >
      <ThemedView className="w-12 h-12 bg-[#949494] dark:bg-[#383838] rounded-full flex items-center justify-center">
        <Ionicons name="add" size={24} color="white" />
      </ThemedView>
      <ThemedText className="text-[#484848] dark:text-white text-center text-[18px] font-bold mt-5">
        Add Account
      </ThemedText>
    </Pressable>
    <ThemedView className="flex-row items-center pt-[10%]">
      <ThemedView className={`justify-center items-center rounded-[10%] w-[340px] h-[220px] ${componentColor} ml-2`}>
        <AntDesign name="filetext1" size={70} color={componentIcon} className="m-3" />
        <ThemedText className="text-[#484848] dark:text-white mx-5 text-center font-bold">
          Please create an account to proceed with your transaction.
        </ThemedText>
      </ThemedView>
    </ThemedView>
  </ThemedView>
)}
      </ThemedView>
      {isOverlayVisible && (
        <TouchableWithoutFeedback onPress={() => toggleOverlay(false)}>
          <View className=" absolute inset-0 bg-[#00000055] flex-1 items-center justify-end ">
            <Animated.View
              style={{
                transform: [{ translateY: slideAnim }],
                width: "100%",
                height: 480,
                borderTopLeftRadius: 40,
                borderTopRightRadius: 40,
              }}
              className="p-6 bg-[#f2f2f2] dark:bg-[#222222] shadow-lg"
            >
              {/* ‚úÖ Container ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
              <View
                className="h-full w-full"
                onStartShouldSetResponder={() => true}
              >
                <View className="flex items-center">
                  {/* ‚úÖ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå Budget */}
                  <View
                    className="w-28 h-28 rounded-lg flex items-center justify-center mb-4"
                    style={{
                      backgroundColor:
                        selectedColor || (isDarkMode ? "#2D3748" : "#D3D3D3"),
                    }}
                  >
                    {selectedIcon ? (
                      <MaterialIcons
                        name={selectedIcon as any}
                        size={42}
                        color="white"
                      />
                    ) : (
                      <Ionicons
                        name="person-outline"
                        size={32}
                        color={isDarkMode ? "white" : "gray"}
                      />
                    )}
                  </View>

                  {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ */}
                  <ScrollView
                    horizontal
                    showsHorizontalScrollIndicator={false}
                    className="w-full"
                  >
                    <View className="flex-row gap-x-4 px-4">
                      {colors.map((color, index) => (
                        <Pressable
                          key={index}
                          onPress={() => setSelectedColor(color)}
                          className={`w-8 h-8 rounded-full border-2 ${
                            selectedColor === color
                              ? isDarkMode
                                ? "border-white"
                                : "border-black"
                              : "border-gray-500 dark:border-gray-700"
                          }`}
                          style={{ backgroundColor: color }}
                        />
                      ))}
                    </View>
                  </ScrollView>

                  {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô */}
                  <View className="flex-row space-x-3 mt-2">
                    {icons.map((icon, index) => (
                      <Pressable
                        key={index}
                        onPress={() => setSelectedIcon(icon)}
                        className="p-2"
                      >
                        <MaterialIcons
                          name={icon as any}
                          size={32}
                          color={
                            selectedIcon === icon
                              ? isDarkMode
                                ? "white"
                                : "black"
                              : "gray"
                          }
                        />
                      </Pressable>
                    ))}
                  </View>

                  {/* ‚úÖ Budget Name */}
                  <View className="w-full mt-4">
                    <ThemedText className="font-bold text-lg text-gray-900 dark:text-white">
                      Budget Name
                    </ThemedText>
                    <ThemedView className="w-full flex-row bg-transparent">
                      <TextInput
                        placeholder="Enter Budget Name"
                        keyboardType="default"
                        style={{
                          backgroundColor: isDarkMode ? "#121212" : "#D9D9D9",
                          color: isDarkMode ? "#FFF" : "#2F2F2F",
                          borderRadius: 12,
                          padding: 10,
                        }}
                        onChangeText={setBudgetName}
                        placeholderTextColor={isDarkMode ? "#888" : "#555"} // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dark Mode
                        className="w-full"
                      />
                    </ThemedView>
                  </View>

                  <View className="w-full mt-4">
  {/* Label "Limits" ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */}
  <View className="flex-row items-center  mb-2">
    <View className="flex-row items-center  mb-2">
      <Text className="font-bold text-lg text-gray-900 dark:text-white">
        Limits
      </Text>
      <View className="flex-row items-center mb-2">
        <View className="w-44 h-10 pb-3 ml-36 bg-gray-200 dark:bg-gray-800 rounded-lg">
          <TextInput
            value={inputValue} // ‚úÖ ‡πÉ‡∏ä‡πâ State ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
            onChangeText={handleAmountChange} // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            keyboardType="numeric"
            placeholder="0"
            placeholderTextColor="#AAA"
            className="text-right text-gray-900 dark:text-white text-lg p-2"
            style={{ height: 38 }}
          />
        </View>
      </View>
    </View>
    <Text className="text-gray-600 dark:text-gray-300 text-sm text-start ml-3">
      THB
    </Text>
  </View>

  {/* ‚úÖ Slider (‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Limits) */}
  <Slider
    value={sliderValueRef.current} // ‚úÖ ‡πÉ‡∏ä‡πâ `useRef` ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    onValueChange={handleSliderChange} // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Slider, ‡∏Ñ‡πà‡∏≤ TextInput ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°
    onSlidingComplete={handleSliderComplete} // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡∏¥‡πâ‡∏ß
    minimumValue={0}
    maximumValue={100}
    step={1}
    thumbTintColor="#1E88E5" // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ Thumb ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    minimumTrackTintColor="#1E88E5" // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á progress
    maximumTrackTintColor="#d3d3d3" // ‚úÖ ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á Thumb
    style={{
      height: 20,
      width: "55%",
      marginStart: 10,
      alignSelf: "center",
      marginHorizontal: 10,
      transform: [{ scaleY: 2 }, { scaleX: 2 }],
    }}
  />

  {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å useRef */}
  <Text className="text-gray-600 dark:text-gray-300 text-sm text-start mt-2">
    {sliderValueRef.current.toFixed(0)}% ({budgetLimitRef.current.toFixed(2)} THB)
  </Text>
</View>



                  {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Save (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) */}
                  <Pressable
                    onPress={() => toggleOverlay(false)}
                    className="p-3 bg-gray-400 dark:bg-gray-700 rounded-lg mt-4 w-full"
                  >
                    <Text className="text-center font-bold text-white">
                      Save
                    </Text>
                  </Pressable>
                </View>
              </View>
            </Animated.View>
          </View>
        </TouchableWithoutFeedback>
      )}
    </ThemedView>
  );
}
