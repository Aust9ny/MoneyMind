const express = require('express');
const router = express.Router();
const multer = require('multer');
const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');
const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');
// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏° Jimp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Preprocessing)
const Jimp = require('jimp');

require('dayjs/locale/th'); // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
dayjs.extend(customParseFormat);

router.use(express.json());
router.use(express.urlencoded({ extended: false }));

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (uploads/) ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
const uploadDir = 'uploads/';
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        cb(null, `uploaded_${timestamp}${ext}`);
    }
});
const upload = multer({ storage: storage });

/**
 * ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (POST) ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå 'image'
 * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå, ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Preprocessing),
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û (OCR) ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
 */
router.post('/', upload.single('image'), async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ message: "No image uploaded", success: false });
    }

    const imagePath = path.join(uploadDir, req.file.filename);
    const timestamp = Date.now();
    const rawTextPath = path.join(uploadDir, `ocr_raw_${timestamp}.txt`);
    const cleanedTextPath = path.join(uploadDir, `ocr_cleaned_${timestamp}.txt`);
    const extractedDataPath = path.join(uploadDir, `ocr_data_${timestamp}.json`);

    try {
        console.log(`üîç Preprocessing image: ${imagePath}`);

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        // ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Preprocessing) ‡∏î‡πâ‡∏ß‡∏¢ Jimp
        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        let jimpImage = await Jimp.read(imagePath);

        // 1) ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ (Grayscale)
        jimpImage = jimpImage.grayscale();

        // 2) ‡πÄ‡∏û‡∏¥‡πà‡∏° Contrast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
        jimpImage = jimpImage.contrast(0.5);

        // 3) ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡πÅ‡∏ö‡∏ö‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ (Threshold)
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ { max: 128 } ‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        jimpImage = jimpImage.threshold({ max: 128 });

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        await jimpImage.writeAsync(imagePath);

        console.log('‚úÖ Preprocessing completed.');

        // OCR ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        const { data: { text } } = await Tesseract.recognize(
            imagePath,
            'tha+eng', // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            { logger: m => console.log(m) }
        );

        console.log('üìú OCR Output (raw):\n', text);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö (Raw OCR Text) ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt
        fs.writeFileSync(rawTextPath, text, 'utf8');

        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Clean Text)
        let cleanedText = cleanText(text);
        console.log('üìú OCR Output (cleaned):\n', cleanedText);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt
        fs.writeFileSync(cleanedTextPath, cleanedText, 'utf8');

        // ‡∏î‡∏∂‡∏á (Extract) ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô)
        const extractedData = extractReceiptData(cleanedText);
        console.log('üìä Extracted Data:', extractedData);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        fs.writeFileSync(extractedDataPath, JSON.stringify(extractedData, null, 2), 'utf8');

        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        return res.status(200).json({
            message: "OCR success",
            success: true,
            imagePath,
            extractedData,
            savedFiles: {
                rawTextPath,
                cleanedTextPath,
                extractedDataPath
            }
        });

    } catch (error) {
        console.error('‚ùå OCR Error:', error);
        return res.status(500).json({ message: "OCR failed", error: error.message, success: false });
    }
});

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô cleanText
 * ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡πà‡∏≠‡∏¢
 * @param {string} text ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR
 * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
 */
function cleanText(text) {
    return text
        .replace(/\s+/g, ' ') // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        .replace(/[^\w\d‡∏Å-‡∏Æ‡πê-‡πô.,:/-]/g, '') // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        .replace(/‡∏ö‡∏ó/g, '‡∏ö‡∏≤‡∏ó') // ‡πÅ‡∏Å‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏Ç‡∏≠‡∏á OCR
        .replace(/php/g, '') // ‡∏•‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        .replace(/‡∏¢‡∏≠‡∏î‡∏™‡∏ó‡∏ò/g, '‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥') // ‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
        .replace(/‡∏£‡∏ß‡∏°/g, '‡∏£‡∏ß‡∏°') // ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        .trim();
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô extractReceiptData
 * ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î (Extract) ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏ä‡πà‡∏ô
 * ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á, ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô, ‡∏†‡∏≤‡∏©‡∏µ ‡∏Ø‡∏•‡∏Ø
 * @param {string} text ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR
 * @returns {Object} ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (Object) ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
 */
function extractReceiptData(text) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    const bankOrShopRegex = /(‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£|Bank|‡∏£‡πâ‡∏≤‡∏ô|‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó|Shop|Store|7-11|Tesco|Lotus|Big C|Makro|True|AIS|DTAC|TOT|‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤|‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏õ‡∏≤)\s*([\w\s]+)/;
    const bankOrShop = text.match(bankOrShopRegex)?.[0] || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ‡πÄ‡∏ä‡πà‡∏ô "DD ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô YYYY"
    const dateRegexThai = /(\d{1,2})\s*(‡∏°\.?‡∏Ñ\.?|‡∏Å\.?‡∏û\.?|‡∏°‡∏µ\.?‡∏Ñ\.?|‡πÄ‡∏°\.?‡∏¢\.?|‡∏û\.?‡∏Ñ\.?|‡∏°‡∏¥\.?‡∏¢\.?|‡∏Å\.?‡∏Ñ\.?|‡∏™\.?‡∏Ñ\.?|‡∏Å\.?‡∏¢\.?|‡∏ï\.?‡∏Ñ\.?|‡∏û\.?‡∏¢\.?|‡∏ò\.?‡∏Ñ\.?)\s*(\d{2,4})/;
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô) ‡πÄ‡∏ä‡πà‡∏ô "DD/MM/YYYY" ‡∏´‡∏£‡∏∑‡∏≠ "DD-MM-YYYY"
    const dateRegexNumeric = /(?:‡∏ß‡∏±‡∏ô[‡∏ó‡∏µ‡πà‡∏ó‡∏µ]\s*[:Ôºö]?\s*)?(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2,4})/;

    let formattedDate = null;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "DD ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô YYYY" (‡πÑ‡∏ó‡∏¢)
    const dateMatchThai = text.match(dateRegexThai);
    if (dateMatchThai) {
        let [_, day, monthThai, year] = dateMatchThai;
        const monthMap = {
            "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
            "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
            "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
        };
        let month = monthMap[monthThai] || "01"; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ OCR ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î

        // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. (‡∏´‡∏≤‡∏Å‡∏õ‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2500)
        if (parseInt(year) > 2500) {
            year = parseInt(year) - 543;
        }

        formattedDate = dayjs(`${year}-${month}-${day}`, "YYYY-MM-DD").toDate();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "DD/MM/YYYY" (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô) ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const dateMatchNumeric = text.match(dateRegexNumeric);
    if (dateMatchNumeric && !formattedDate) {
        let [_, day, month, year] = dateMatchNumeric;
        if (parseInt(year) > 2500) {
            year = parseInt(year) - 543;
        }
        formattedDate = dayjs(`${year}-${month}-${day}`, "YYYY-MM-DD").toDate();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm ‡∏´‡∏£‡∏∑‡∏≠ HH:mm:ss
    const timeRegex = /(\d{1,2}):(\d{2})(?::(\d{2}))?/;
    const timeMatch = text.match(timeRegex);
    let formattedTime = null;
    if (timeMatch) {
        let hours = timeMatch[1];
        let minutes = timeMatch[2];
        let seconds = timeMatch[3] || "00"; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        formattedTime = dayjs(`${hours}:${minutes}:${seconds}`, "HH:mm:ss").toDate();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (Reference No.)
    const refRegex = /(INV|RECEIPT|TAX|BAYM|SCB|KTB|KBank|TTB|UOB|CIMB|GSB|BBL|TMB|QR|PAYMENT|REF)\d+/;
    const referenceNo = text.match(refRegex)?.[0] || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°
    // ‡∏´‡∏≤ "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" / "‡∏£‡∏ß‡∏°" / "‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥" / "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const moneyRegex = /(?:‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô|‡∏£‡∏ß‡∏°|‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥|‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô)?\s*[:Ôºö]?\s*([\d]{1,3}(?:,\d{3})*(?:\.\d{1,2})?)\s*(THB|‡∏ö‡∏≤‡∏ó‡∏ñ‡πâ‡∏ß‡∏ô|‡∏ö‡∏≤‡∏ó)?/gi;
    let moneyMatches = [...text.matchAll(moneyRegex)]
        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
        .filter(m => m[1] && (m[2] || /(?:‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô|‡∏£‡∏ß‡∏°|‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥|‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô)/.test(text.substring(m.index - 15, m.index))))
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏î ',' ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        .map(m => parseFloat(m[1].replace(/,/g, '')));

    const totalAmount = moneyMatches.length > 0 ? Math.max(...moneyMatches).toFixed(2) : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° (VAT) 7%
    const vatRegex = /‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°\s*([\d,]+(?:\.\d{1,2})?)\s*(THB|‡∏ö‡∏≤‡∏ó)/;
    const vatMatch = text.match(vatRegex);
    const vat = vatMatch ? parseFloat(vatMatch[1].replace(/,/g, '')).toFixed(2) : '0.00';

    return { bankOrShop, date: formattedDate, time: formattedTime, referenceNo, totalAmount, vat };
}

module.exports = router;
